# -*- coding: utf-8 -*-
"""ChatBot01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xfPlzQxIoYl40v-UfS1YUTVlnXZ99ctC

# Hobo loading...
"""

#pip install --user -U nltk

import io
import random
import string # to process standard python strings
import warnings
import numpy as np
from nltk.chat.util import Chat, reflections
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import warnings
warnings.filterwarnings('ignore')

import nltk
from nltk.stem import WordNetLemmatizer
nltk.download('popular', quiet=True) # for downloading packages

#reading file
f = open('/content/faq.txt', errors = "ignore")
raw = f.read()
raw = raw.lower() #converts text into lowercase

#nltk.download('punkt') # first-time use only
#nltk.download('wordnet') # first-time use only

#Tokenisation
sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences 
word_tokens = nltk.word_tokenize(raw)# converts to list of words

sent_tokens[:2]

word_tokens[:2]

# lemmerising
lemmer = WordNetLemmatizer()
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

# Keyword Matching
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey",)
GREETING_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "heya", "I am glad! You are talking to me"]

def greeting(sentence):
    """If user's input is a greeting, return a greeting response"""
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

# Generating response
def response(user_response):
    Hobo_response=''
    sent_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        Hobo_response=Hobo_response+"I am sorry! I don't understand you"
        return Hobo_response
    else:
        Hobo_response = Hobo_response+sent_tokens[idx]
        return Hobo_response

flag=True
print("HOBO: My name is Hobo. I am here to guide you about Cloud Councelage IP. Please clear your doubts. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("HOBO: You are welcome..")
        else:
            if(greeting(user_response)!=None):
                print("HOBO: "+greeting(user_response))
            else:
                print("HOBO: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("HOBO: Bye! take care..")
        chat = Chat(reflections)
        chat.converse()